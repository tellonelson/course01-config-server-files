server:
  port: ${CUSTOM.SERVER.PORT:9090}
  
eureka:
  instance:
    prefer-ip-address: true
    lease-expiration-duration-in-seconds: 30
  client:
    register-with-eureka: true
    service-url:
      defaultZone: ${EUREKA.SERVER.HOSTNAME:http://localhost:8761/eureka}
    fetchRegistry: true
          
spring:
  cloud:
    gateway:
      routes:
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/api/user-service/**
          filters:
            - StripPrefix=2
            - Mitocodefilter=MitoCodeKey, MitoCodeValue # se puede agregar estos filtros tambien a estas uri
        - id: product-service
          uri: lb://product-service
          predicates:
            - Path=/api/product-service/**
          filters:
            - StripPrefix=2
            #- AddRequestParameter=token,mitocode
            #- AddRequestHeader=token,mitocode
            #- AddResponseHeader=CUSTOM_RESPONSE_HEADER,HEADER_mitocode
            - Mitocodefilter=MitoCodeKey, MitoCodeValue # se pone el nombre que se puso en name en caso de sobreescribir ese metodo de la clase del filtro y se pone le pasan los valores del filtro
            #- name: CustomFilters # esta es una forma de personalizar los filtros
            #  args:
            #    headerKey: MitoCodeKey
            #    headerValue: MitoCodeValue
            - name: CircuitBreaker
              args:
                name: productCB # se usa el de la instacia declarada en resilience4j
                fallbackUri: forward:/api/user-service/user
                statusCodes: 500, 403, 401, 400, 504
resilience4j:
  circuitbreaker:
    configs:
      mitocodeCircuitBreaker:
        slidingWindowSize: 20 # se puede escribir de esta manera tambien sliding-window-size, lo escrito anterior es con camel case
        failureRateThreshold: 75
        waitDurationInOpenState: 30s
        permittedNumberOfCallsInHalfOpenState: 10
        slowCallDurationThreshold: 2s
        slowCallRateThreshold: 10
    instances:
      productCB: # este es el id que debemos usar para ser usado en el controlador
        base-config: mitocodeCircuitBreaker
  timelimiter:
    configs:
      mitocodeTimeLimiterProduct: # este id se usa en base-config
        timeoutDuration: 1s
    instances:
      product-timelimiter:
        base-config: mitocodeTimeLimiterProduct # este id es parte del config